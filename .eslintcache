[{"C:\\Users\\Ismael\\Projects\\memory-card\\src\\index.js":"1","C:\\Users\\Ismael\\Projects\\memory-card\\src\\App.js":"2","C:\\Users\\Ismael\\Projects\\memory-card\\src\\reportWebVitals.js":"3","C:\\Users\\Ismael\\Projects\\memory-card\\src\\Components\\Game.js":"4","C:\\Users\\Ismael\\Projects\\memory-card\\src\\Components\\About.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":938,"mtime":1612864567496,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":10874,"mtime":1612868968693,"results":"10","hashOfConfig":"7"},{"size":703,"mtime":1612787181541,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"48bq0k",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\Ismael\\Projects\\memory-card\\src\\index.js",[],["25","26"],"C:\\Users\\Ismael\\Projects\\memory-card\\src\\App.js",[],"C:\\Users\\Ismael\\Projects\\memory-card\\src\\reportWebVitals.js",[],"C:\\Users\\Ismael\\Projects\\memory-card\\src\\Components\\Game.js",["27","28","29","30","31"],"import React, { useEffect, useState } from 'react';\r\nimport '../Style/Game.css';\r\nimport _ from 'lodash';\r\nimport aegar from '../Images/Aegar.png';\r\nimport alrund from '../Images/Alrund.png';\r\nimport arni from '../Images/Arni.png';\r\nimport birgi from '../Images/Birgi.png';\r\nimport cosima from '../Images/Cosima.png';\r\nimport egon from '../Images/Egon.png';\r\nimport esika from '../Images/Esika.png';\r\nimport firja from '../Images/Firja.png';\r\nimport fynn from '../Images/Fynn.png';\r\nimport halvar from '../Images/Halvar.png';\r\nimport harald from '../Images/Harald.png';\r\nimport inga from '../Images/Inga.png';\r\nimport jorn from '../Images/Jorn.png';\r\nimport kardur from '../Images/Kardur.png';\r\nimport kaya from '../Images/Kaya.png';\r\nimport koll from '../Images/Koll.png';\r\nimport kolvori from '../Images/Kolvori.png';\r\nimport koma from '../Images/Koma.png';\r\nimport magda from '../Images/Magda.png';\r\nimport maja from '../Images/Maja.png';\r\nimport moritte from '../Images/Moritte.png';\r\nimport narfi from '../Images/Narfi.png';\r\nimport niko from '../Images/Niko.png';\r\nimport orvar from '../Images/Orvar.png';\r\nimport reidane from '../Images/Reidane.png';\r\nimport sarulf from '../Images/Sarulf.png';\r\nimport sigrid from '../Images/Sigrid.png';\r\nimport svella from '../Images/Svella.png';\r\nimport tergrid from '../Images/Tergrid.png';\r\nimport toralf from '../Images/Toralf.png';\r\nimport tyvar from '../Images/Tyvar.png';\r\nimport valki from '../Images/Valki.png';\r\nimport varragoth from '../Images/Varragoth.png';\r\nimport vega from '../Images/Vega.png';\r\nimport vorinclex from '../Images/Vorinclex.png';\r\nimport cardBack from '../Images/CardBack.png';\r\n\r\nfunction Game(props) {\r\n  const [characterArray, setCharacter] = useState([\r\n    {\r\n      id: 'Aegar, the Freezing Flame',\r\n      src: aegar,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Alrund, God of the Cosmos',\r\n      src: alrund,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Arni Brokenbow',\r\n      src: arni,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Birgi, God of Storytelling',\r\n      src: birgi,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Cosima, God of the Voyage',\r\n      src: cosima,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Egon, God of Death',\r\n      src: egon,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Esika, God of the Tree',\r\n      src: esika,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Firja, Judge of Valor',\r\n      src: firja,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Fynn, the Fangbearer',\r\n      src: fynn,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Halvar, God of Battle',\r\n      src: halvar,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Harald, King of Skemfar',\r\n      src: harald,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Inga Rune-Eyes',\r\n      src: inga,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Jorn, God of Winter',\r\n      src: jorn,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Kardur, Doomscourge',\r\n      src: kardur,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Kaya the Inexorable',\r\n      src: kaya,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Koll, the Forgemaster',\r\n      src: koll,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Kolvori, God of Kinship',\r\n      src: kolvori,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Koma, Cosmos Serpent',\r\n      src: koma,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Magda, Brazen Outlaw',\r\n      src: magda,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Maja, Bretagard Protector',\r\n      src: maja,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Moritte of the Frost',\r\n      src: moritte,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Narfi, Betrayer King',\r\n      src: narfi,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Niko Aris',\r\n      src: niko,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Orvar, the All-Form',\r\n      src: orvar,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Reidane, God of the Worthy',\r\n      src: reidane,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Sarulf, Realm Eater',\r\n      src: sarulf,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Sigrid, God-Favored',\r\n      src: sigrid,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Svella, Ice Shaper',\r\n      src: svella,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Tergrid, God of Fright',\r\n      src: tergrid,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Toralf, God of Fury',\r\n      src: toralf,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Tyvar Kell',\r\n      src: tyvar,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Valki, God of Lies',\r\n      src: valki,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Varragoth, Bloodsky Sire',\r\n      src: varragoth,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Vega, the Watcher',\r\n      src: vega,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n    {\r\n      id: 'Vorinclex, Monstrous Raider',\r\n      src: vorinclex,\r\n      revealed: false,\r\n      index: '',\r\n    },\r\n  ]);\r\n\r\n  // Elegimos 10 cartas de la \"base de datos\"\r\n  const [chosenCards, setChosenCards] = useState(\r\n    _.sampleSize(characterArray, 10),\r\n  );\r\n\r\n  // Iniciamos el limite de intentos\r\n  const [attemps, setAttemps] = useState(10);\r\n\r\n  //Logica que controla si ganas o pierdes\r\n  useEffect(() => {\r\n    if (attemps === 0) {\r\n      alert('You lost!');\r\n    }\r\n  }, [attemps]);\r\n\r\n  // Inicializamos un array donde guardamos las cartas a las que hacemos clicks en parejas\r\n  const [lastPickedCard, setPickedCard] = useState([]);\r\n\r\n  //Controla el estado de las cartas tras hacer click en ellas\r\n  const handleClickOnCard = (e) => {\r\n    chosenCards.map((card, index) => {\r\n      // Comprobamos si la carta ya ha sido pulsada y salimos si asi es\r\n      if (card.revealed === true) {\r\n        return card;\r\n      }\r\n      // Comprobamos si la carta pulsada coincide con alguna del array y si es asi le cambiamos la property revealed\r\n      else if (card.index.toString() === e.target.attributes[1].value) {\r\n        const newCharacterArray = [...chosenCards];\r\n        newCharacterArray[index].revealed = true;\r\n        setChosenCards(newCharacterArray);\r\n        // Si la carta no es la primera del array la metemos en el array\r\n        setPickedCard([...lastPickedCard, card]);\r\n      }\r\n      return card;\r\n    });\r\n  };\r\n\r\n  // Logica de acierto o error\r\n  useEffect(() => {\r\n    if (!lastPickedCard[0] || (!!lastPickedCard[0] && !lastPickedCard[1])) {\r\n      // Si aun no tenemos ambas cartas en el array volvemos\r\n      return;\r\n    } else if (\r\n      !!lastPickedCard[0] &&\r\n      !!lastPickedCard[1] &&\r\n      lastPickedCard[0].id === lastPickedCard[1].id\r\n    ) {\r\n      // Si ambas cartas escogidas son la misma el score sube y reseteamos el array de cartas escogidas\r\n      console.log('Yay!');\r\n      setPickedCard([]);\r\n    } else if (lastPickedCard[0].id !== lastPickedCard[1].id) {\r\n      // Si ambas cartas escogidas no coinciden cambiamos su estado, restamos un error y reseteamos el array de cartas escodigas\r\n      chosenCards.map((card, index) => {\r\n        if (\r\n          card.id === lastPickedCard[0].id ||\r\n          card.id === lastPickedCard[1].id\r\n        ) {\r\n          const newCharacterArray = [...chosenCards];\r\n          setTimeout(() => {\r\n            newCharacterArray[index].revealed = false;\r\n          }, 100);\r\n          setChosenCards(newCharacterArray);\r\n        }\r\n      });\r\n      // El jugador tiene 1 error mas\r\n      setAttemps(attemps - 1);\r\n      console.log('You choose.... WRONG!');\r\n      setPickedCard([]);\r\n    }\r\n  }, [lastPickedCard]);\r\n\r\n  // Cuando carga por primera vez \"creamos\" el mazo de cartas del juego, duplicamos las 10 elegidas al inicio, las randomizamos y le damos a cada carta su index.\r\n  useEffect(() => {\r\n    const cardsToDuplicate = chosenCards;\r\n    const duplicatedCards = _.cloneDeep(cardsToDuplicate);\r\n    const shuffledArrays = _.shuffle([...cardsToDuplicate, ...duplicatedCards]);\r\n    const indexedArray = shuffledArrays.map((card, index) => {\r\n      card.index = index;\r\n      return card;\r\n    });\r\n    setChosenCards(indexedArray);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h3 className=\"scoreboard\">Attemps left:</h3>\r\n      <h3 className=\"scoreboard\"> {attemps}</h3>\r\n      <div className=\"game\">\r\n        {chosenCards.map((card, index) => {\r\n          if (card.revealed === false) {\r\n            return (\r\n              <div className=\"flipCard\" key={index}>\r\n                <div className=\"flipCardInner\">\r\n                  <div className=\"flipCardFront\">\r\n                    <img\r\n                      alt={card.id}\r\n                      value={index}\r\n                      src={cardBack}\r\n                      className=\"card\"\r\n                      onClick={handleClickOnCard}\r\n                    />\r\n                  </div>\r\n                  <div className=\"flipCardBack\">\r\n                    <img\r\n                      alt={card.id}\r\n                      value={index}\r\n                      src={card.src}\r\n                      className=\"card\"\r\n                      onClick={handleClickOnCard}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          } else if (card.revealed === true) {\r\n            return (\r\n              <div className=\"flipCard\" key={index}>\r\n                <div className=\"flipCardInner flippedCard\">\r\n                  <div className=\"flipCardFront\">\r\n                    <img\r\n                      alt={card.id}\r\n                      value={index}\r\n                      src={cardBack}\r\n                      className=\"card\"\r\n                      onClick={handleClickOnCard}\r\n                    />\r\n                  </div>\r\n                  <div className=\"flipCardBack\">\r\n                    <img\r\n                      alt={card.id}\r\n                      value={index}\r\n                      src={card.src}\r\n                      className=\"card\"\r\n                      onClick={handleClickOnCard}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          }\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","C:\\Users\\Ismael\\Projects\\memory-card\\src\\Components\\About.js",[],["32","33"],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":42,"column":26,"nodeType":"40","messageId":"41","endLine":42,"endColumn":38},{"ruleId":"42","severity":1,"message":"43","line":307,"column":37,"nodeType":"44","messageId":"45","endLine":307,"endColumn":39},{"ruleId":"46","severity":1,"message":"47","line":324,"column":6,"nodeType":"48","endLine":324,"endColumn":22,"suggestions":"49"},{"ruleId":"46","severity":1,"message":"50","line":336,"column":6,"nodeType":"48","endLine":336,"endColumn":8,"suggestions":"51"},{"ruleId":"42","severity":1,"message":"52","line":343,"column":40,"nodeType":"44","messageId":"53","endLine":343,"endColumn":42},{"ruleId":"34","replacedBy":"54"},{"ruleId":"36","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'setCharacter' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'attemps' and 'chosenCards'. Either include them or remove the dependency array. You can also do a functional update 'setAttemps(a => ...)' if you only need 'attemps' in the 'setAttemps' call.","ArrayExpression",["58"],"React Hook useEffect has a missing dependency: 'chosenCards'. Either include it or remove the dependency array.",["59"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd",["56"],["57"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},"Update the dependencies array to be: [attemps, chosenCards, lastPickedCard]",{"range":"64","text":"65"},"Update the dependencies array to be: [chosenCards]",{"range":"66","text":"67"},[8213,8229],"[attemps, chosenCards, lastPickedCard]",[8764,8766],"[chosenCards]"]